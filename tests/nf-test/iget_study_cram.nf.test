nextflow_process {

    name "Test Process iget_study_cram"
    script "modules/iget_study_cram.nf"
    process "iget_study_cram"

    test("Should run without failures and produce cram file") {
        when {
            params {
                run_iget_study_cram = true
            }
            process {
                """
                input[0] = tuple [study_id: 10754, id: 'dummy_sample'], '/seq/10754/10754_1#20.cram'
                """
            }
        }
        then {
            assert process.success
            with (process.out.study_sample_cram.get(0)) {
                assert size() == 2
                assert get(0)['study_id'] == 10754
                assert get(0)['id'] == 'dummy_sample'
                assert get(1) ==~ '.*/dummy_sample.10754_1_20.cram'
                assert snapshot(get(1)).match()
            }
        }
    }

    test("Should run without failures and produce cram file for NovaSeq crams") {
        when {
            params {
                run_iget_study_cram = true
            }
            process {
                """
                input[0] = tuple [study_id: 7135, id: 'dummy_sample'], '/seq/illumina/runs/47/47579/plex70/47579#70.cram'
                """
            }
        }
        then {
            assert process.success
            with (process.out.study_sample_cram.get(0)) {
                assert size() == 2
                assert get(0)['study_id'] == 7135
                assert get(0)['id'] == 'dummy_sample'
                assert get(1) ==~ '.*/dummy_sample.47579_70.cram'
                assert snapshot(get(1)).match()
            }
        }
    }
}
