workDir =    "${projectDir}/work"
tmpDir =     "${projectDir}/tmp"

params {

    outdir           = null
    metadata_dir     = "${params.outdir}/metadata/"
    cram_output_dir  = "${params.outdir}/crams/"
    merged_crams_dir = "${params.outdir}/merged_crams/"
    fastq_dir        = "${params.outdir}/fastq/"
    reportdir        = "${params.outdir}/reports/"

    samples_to_process = 1

    run_mode = null
    // mode "study_id" will list/iget all samples from an input list of Irods study_id(s).
    // mode "csv_samples_id" will iget all samples listed in input tsv file.
    // mode "google_spreadsheet" will iget all samples listed in input google spreadsheet column.

    // if you selected mode "study_id", define these:
    // run_imeta_study = true  // whether to run task to list all samples and cram from study ids
    // input_studies = '6595'  // list of study_ids to pull, can be more than one (seperated by commas)
    // input_study_runs = null // list of run_ids to pull, can be more than one (seperated by commas)

    // if you selected mode "csv_samples_id", define these:
	// will iget samples listed one-per-line in input file `input_samples_csv`:
	// it needs to be tab-separated and have a column name `input_samples_csv_column` that matches iRODS samples.
    // input_samples_csv = "${projectDir}/example_runtime/sample.tsv"
    // input_samples_csv_column = "sample" // column for Irods sample IDs to search.

    // if you selected mode "google_spreadsheet", define these:
	// will iget samples listed one-per-line in google spreadsheet:
	// mercury pipeline user must have been configured access to that spreadsheet.
	// it needs to have a column name "sanger_sample_id" that matches Irods samples.
	// run_gsheet_to_csv = true // whether to run task to use google API and Service Account to convert google Spreadsheet with list of Irods samples IDs to local csv file.
	// input_gsheet_name = "Submission_Data_Pilot_UKB" // name of google sheet
	// input_google_creds = "google_api_credentials.json" // file path to service account credentials json, must have been granted access to spreadsheet
	// output_csv_name = "Submission_Data_Pilot_UKB.csv" // name of sheet table converted to csv
	// input_gsheet_column = "SANGER SAMPLE ID" // column for Irods sample IDs to search.

    // input parameters common to all input modes:
    run_imeta_samples          = true   // whether to run task to list all samples and cram from provided list of samples IDs from csv input table (created from google Spreadsheet).
    run_imeta_study_cellranger = false  // whether to run task to list all cellranger irods objects
    run_iget_study_cram        = true   // whether to run task to iget all samples cram files
    run_iget_study_cellranger  = false  // whether to run task to iget all samples cellranger irods objects
    run_merge_crams            = true
    run_crams_to_fastq         = true   // whether to run task to merge and convert crams of each sample to fastq
    crams_to_fastq_min_reads   = 1000   // minimum number of reads in merged cram file to try and convert to fastq.gz
    copy_mode                  = "copy" // choose "rellink" ,"symlink", "move" or "copy" to stage in crams and cellranger data from work dir into results dir
    filter_manual_qc           = true   // whether to include `manual_qc = 1` into iRODS query

    // the following are for one-off tasks run after workflow completion to clean-up work dir:
    on_complete_uncache_irods_search = false // will remove work dir (effectively un-caching) of Irods search tasks that need to be rerun on next NF run even if completed successfully.
    on_complete_remove_workdir_failed_tasks = false // will remove work dirs of failed tasks (.exitcode file not 0)
    // TODO: on_complete_remove_workdir_notsymlinked_in_results = false // will remove work dirs of tasks that are not symlinked anywhere in the results dir. This might uncache tasks.. use carefully..

	custom_config_version      = "master"
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
}

timeline {
  enabled = true
  file = "${params.reportdir}/timeline.html"
}

trace {
  enabled = true
  file = "${params.reportdir}/trace.txt"
}

try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

includeConfig './confs/base.conf'

profiles {
  hgi {
    includeConfig './confs/hgi.conf'
  }
  docker {
    includeConfig './confs/docker.conf'
  }
  singularity {
	singularity.enabled    = true
	singularity.autoMounts = true
	docker.enabled         = false
	podman.enabled         = false
	shifter.enabled        = false
	charliecloud.enabled   = false
  }
}


